import type { NextPage } from 'next';
import Head from 'next/head';
import styles from '../styles/Home.module.css';
import { useEffect, useState } from 'react';
import { dataGeo, dataGeoErr, optionsFetch, typeErrorCallback, typeSuccessCallback } from '../components/interface';
import { WeatherApp } from '../components/weatherapp';
import { ErrorPage } from '../components/denypermission';
import { Loading } from '../components/load';
import Script from 'next/script';

const options:optionsFetch = {
  enableHighAccuracy: true,
  timeout: 5000,
  maximumAge: 0,
};

const Home: NextPage = () => {
  const [geolocation, setGeolocation] = useState<dataGeo>({
    latitudeFromAPI: 0,
    longitudeFromAPI: 0
  });
  const [geolocationErr, setGeolocationErr] = useState<dataGeoErr>({
    codeFromAPI: 0,
    messageFromAPI: ""
  });
  const [loading, setLoading] = useState<boolean>(true);

  const successCallback = (position:typeSuccessCallback):void => {
    const { latitude, longitude } = position.coords;
    setGeolocation({latitudeFromAPI:latitude, longitudeFromAPI:longitude});
    setGeolocationErr({codeFromAPI: 0, messageFromAPI:""});
    setLoading(false);
  };
  
  const errorCallback = (error:typeErrorCallback):void => {
    console.error(error)
    setGeolocationErr({codeFromAPI:error.code, messageFromAPI:error.message});
    setLoading(false)
  };
  
  useEffect(()=> {
    if(navigator.geolocation){
      navigator.geolocation.getCurrentPosition(successCallback, errorCallback, options);
    }else{
      setGeolocationErr({codeFromAPI: 0, messageFromAPI:"This browser have not suppoted for this application"});
    };
  }, []);

  return (
    <div className={styles.container}>
      <Head>
        <title>Weather App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        {geolocationErr.messageFromAPI !== "" &&
          <ErrorPage geolocationErr={geolocationErr} />
        }
        {loading &&
          <Loading message="Give us Permissions to be able of showing your area's weather" width={70} height={35}/>
        }
        {!loading && geolocationErr.messageFromAPI === "" &&
          <WeatherApp geolocation={geolocation} setGeolocationErr={setGeolocationErr} />
        }
      </main>
      <Script src="https://cdn.tailwindcss.com" defer />
    </div>
  )
}

export default Home
